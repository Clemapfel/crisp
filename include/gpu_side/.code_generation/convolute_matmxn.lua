-- generate normalized convolution kernel for matrices of size n*m where n, m in {2, 3, 4}

function tab()
    return "    "
end

function timestamp()
    return os.date('%d.%m.%Y, %H:%M:%S')
end

save_to_file = function(content, filename, path)

    local path = path or "./"
    local file = io.open(path .. filename, "w+")

    file:write(content)
    file:close()
end

function generate(rows, cols)

    local mat = "mat";

    if (rows == cols) then
        mat = mat .. tostring(rows)
    else
        mat = mat .. cols .. "x" .. rows
    end

    local buffer = {""}

    table.insert(buffer, "// generated by /crisp/gpu_side/.code_generation/convolute_matmxn.lua on " .. timestamp() .. "\n\n")
    table.insert(buffer, "#version 330 core\n\n")
    table.insert(buffer, "in vec2 _tex_coord;\n\n")

    table.insert(buffer, "uniform " .. mat .. " _kernel;\n")

    table.insert(buffer, [[
uniform sampler2D _texture;
uniform vec2 _texture_size;

void main()
{
    vec2 step_size = 1 / _texture_size;

    float kernel_sum = 0;
    vec4 response = vec4(0);
    float kernel_val;

]])

    for y = 0, cols-1, 1 do
        for x = 0, rows-1, 1 do
            table.insert(buffer, tab() .. "kernel_val = _kernel[" .. y .. "][" .. x .. "];\n")
            table.insert(buffer, tab() .. "response += kernel_val * texture(_texture, _tex_coord + (vec2(" .. tostring(-1 + y) .. ", " .. tostring(-1 + x) .. ") * step_size));\n")
            table.insert(buffer, tab() .. "kernel_sum += kernel_val;\n")
            table.insert(buffer, "\n")
        end
    end

    table.insert(buffer, [[
    if (kernel_sum != 0)
        response /= kernel_sum;

    gl_FragColor = response;]])

    table.insert(buffer, "\n}")
    return table.concat(buffer)
end

function generate_all()

    local path = "/home/clem/Workspace/crisp/include/gpu_side/.shaders/"

    for rows = 2, 4 do
        for cols = 2, 4 do
            save_to_file(generate(rows, cols), "convolute_mat" .. tostring(rows) .. "x" .. tostring(cols) .. ".glsl", path)
        end
    end
end

generate_all()

