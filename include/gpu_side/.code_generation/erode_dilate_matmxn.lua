-- Copyright 2021 Clemens Cords (mail@clemens-cords.com)
--
--- @brief generate morphological erode/dilate with matrices of size n*m in {2, 4, 5}
function tab()
    return "    "
end

function timestamp()
    return os.date('%d.%m.%Y, %H:%M:%S')
end

save_to_file = function(content, filename, path)

    local path = path or "./"
    local file = io.open(path .. filename, "w+")

    file:write(content)
    file:close()
end

function generate(rows, cols, erode_or_dilate)

    local mat = "mat";

    if (rows == cols) then
        mat = mat .. tostring(rows)
    else
        mat = mat .. cols .. "x" .. rows
    end

    local buffer = {""};
    table.insert(buffer, "// Copyright 2021 Clemens Cords (mail@clemens-cords.com)\n");
    table.insert(buffer, "// generated by /crisp/gpu_side/.code_generation/erode_dilate_matmxn.lua on " .. timestamp() .. "\n\n")
    table.insert(buffer, [[
#version 330 core

in vec2 _tex_coord;
out vec4 _out;

uniform sampler2D _texture;
uniform vec2 _texture_size;
]])

    table.insert(buffer, "uniform " .. mat .. " _structuring_element;\n\n");

    if (erode_or_dilate) then

        table.insert(buffer, [[
float to_value(float v)
{
    // project:
    // -1 -> infinity
    //  0 -> infinity
    //  1 -> 1
    return float(uint(int(v -1.1))) + 1;
}]]);
    end

    table.insert(buffer, [[

void main()
{
    vec2 step_size = 1.f / _texture_size;
]])

    local min_or_max = ""
    if (erode_or_dilate) then
        min_or_max = "min"
    else
        min_or_max = "max"
    end

    table.insert(buffer, tab() .. "vec4 " .. min_or_max .. "_v = vec4(");

    if (erode_or_dilate) then
        table.insert(buffer, "2);\n\n")
    else
        table.insert(buffer, "0);\n\n")
    end

    for y = 0, cols-1, 1 do
        for x = 0, rows-1, 1 do

            table.insert(buffer, tab() .. min_or_max .. "_v = " .. min_or_max .. "(" .. min_or_max .. "_v,");

            if (erode_or_dilate) then
                table.insert(buffer, "to_value(_structuring_element[" .. tostring(y) .. "][" .. tostring(x) .. "])");
            else
                table.insert(buffer, "_structuring_element[" .. tostring(y) .. "][" .. tostring(x) .. "]");
            end

            table.insert(buffer," * texture(_texture, _tex_coord + (vec2(" .. tostring(y -1) .. ", " .. tostring(x-1) .. ") * step_size)));\n");
        end
    end

    table.insert(buffer,"\n");
    table.insert(buffer, tab() .. "_out = " .. min_or_max .. "_v;\n}");

    return table.concat(buffer);
end

function generate_all()

    local path = "/home/clem/Workspace/crisp/include/gpu_side/.shaders/"

    for rows = 2, 4 do
        for cols = 2, 4 do
            save_to_file(generate(rows, cols, true), "erode_mat" .. tostring(rows) .. "x" .. tostring(cols) .. ".glsl", path)
            save_to_file(generate(rows, cols, false), "dilate_mat" .. tostring(rows) .. "x" .. tostring(cols) .. ".glsl", path)
        end
    end
end

generate_all()